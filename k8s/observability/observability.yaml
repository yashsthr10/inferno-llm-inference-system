apiVersion: apps/v1
kind: Deployment
metadata: { name: prometheus }
spec:
  replicas: 1
  selector: { matchLabels: { app: prometheus } }
  template:
    metadata: { labels: { app: prometheus } }
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        args: ["--config.file=/etc/prometheus/prometheus.yaml"]
        ports: [{ containerPort: 9090 }]
        volumeMounts: [{ name: config-volume, mountPath: /etc/prometheus }]
      volumes:
      - { name: config-volume, configMap: { name: prometheus-config } }
---
apiVersion: v1
kind: Service
metadata: { name: prometheus }
spec:
  type: ClusterIP
  selector: { app: prometheus }
  ports: [{ port: 9090, targetPort: 9090 }]
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: grafana }
spec:
  replicas: 1
  selector: { matchLabels: { app: grafana } }
  template:
    metadata: { labels: { app: grafana } }
    spec:
      containers:
      - name: grafana
        image: grafana/grafana
        ports: [{ containerPort: 3000 }]
        volumeMounts: [{ name: storage, mountPath: /var/lib/grafana }]
      volumes:
      - { name: storage, persistentVolumeClaim: { claimName: grafana-storage-pvc } }
---
apiVersion: v1
kind: Service
metadata: { name: grafana }
spec:
  type: ClusterIP
  selector: { app: grafana }
  ports: [{ port: 3000, targetPort: 3000 }]
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: loki }
spec:
  replicas: 1
  selector: { matchLabels: { app: loki } }
  template:
    metadata: { labels: { app: loki } }
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.9.2
        args: ["-config.file=/etc/loki/local-config.yaml"] # Default config
        ports: [{ containerPort: 3100 }]
---
apiVersion: v1
kind: Service
metadata: { name: loki }
spec:
  type: ClusterIP
  selector: { app: loki }
  ports: [{ port: 3100, targetPort: 3100 }]
---
apiVersion: apps/v1
kind: DaemonSet
metadata: { name: promtail }
spec:
  selector: { matchLabels: { app: promtail } }
  template:
    metadata: { labels: { app: promtail } }
    spec:
      containers:
      - name: promtail
        image: grafana/promtail:2.9.2
        args: ["-config.file=/etc/promtail/config.yaml"]
        volumeMounts:
        - { name: config, mountPath: /etc/promtail }
        - { name: docker-logs, mountPath: /var/lib/docker/containers, readOnly: true }
        - { name: app-logs, mountPath: /app/logs, readOnly: true }
      volumes:
      - { name: config, configMap: { name: promtail-config } }
      - { name: docker-logs, hostPath: { path: /var/lib/docker/containers } }
      - { name: app-logs, hostPath: { path: /app/logs } } # Assumes logs are written to /app/logs on the node
---
apiVersion: apps/v1
kind: Deployment
metadata: { name: jaeger }
spec:
  replicas: 1
  selector: { matchLabels: { app: jaeger } }
  template:
    metadata: { labels: { app: jaeger } }
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:latest
        ports:
        - { name: ui, containerPort: 16686 }
        - { name: otlp, containerPort: 4318 }
        - { name: collector, containerPort: 14268 }
        - { name: udp, containerPort: 6831, protocol: UDP }
        env:
        - { name: COLLECTOR_OTLP_ENABLED, value: "true" }
---
apiVersion: v1
kind: Service
metadata: { name: jaeger }
spec:
  type: ClusterIP
  selector: { app: jaeger }
  ports:
  - { name: web, port: 16686, targetPort: 16686 }
  - { name: otlp-http, port: 4318, targetPort: 4318 }
  - { name: collector, port: 14268, targetPort: 14268 }
  - { name: udp, port: 6831, targetPort: 6831, protocol: UDP }

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: promtail
subjects:
- kind: ServiceAccount
  name: promtail
  namespace: default # Make sure this matches the namespace you deploy to
---
# And in your Promtail DaemonSet, you must specify the serviceAccountName:
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: promtail
# spec:
#   ...
#   template:
#     ...
#     spec:
#       serviceAccountName: promtail # <-- ADD THIS LINE
#       containers:
#       ...
