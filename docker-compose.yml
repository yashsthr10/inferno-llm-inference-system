services:
  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  vllm:
    build:
      context: ./vllm
      dockerfile: Dockerfile
    container_name: vllm-server
    ports:
      - "8000:8000"
    environment:
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - GPU_MEMORY_UTILIZATION=0.8
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          cpus: '2.0'
          memory: 8G
    volumes:
      - ~/.cache/huggingface:/root/.cache/huggingface
    runtime: nvidia
    env_file:
      - .env
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "4318:4318" 
      - "14268:14268"
      - "6831:6831/udp"
    networks:
      - app-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/api/services"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  consumer:
    build:
      context: ./consumer
    container_name: consumer
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # ports:
    #   - "8020:8020"
    volumes:
      - ./consumer:/app
    networks:
      - app-network
    command: ["./wait-for-it.sh", "kafka:9092", "--", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8020"]
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    environment:
      - JAEGER_ENDPOINT=jaeger:14250
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://yash:secret@db:5432/chatlogs
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=inferno-queue
      - KAFKA_RESPONSE_TOPIC=inferno-response-queue
    # Logging: Docker's default json-file driver is used, logs are collected from stdout/stderr and picked up by Promtail from the host's Docker log directory.
    logging:
      driver: json-file

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yaml:/etc/monitoring/prometheus.yaml
    command:
      - "--config.file=/etc/monitoring/prometheus.yaml"
    ports:
      - "9090:9090"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app-network
    volumes:
      - grafana-storage:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: yash
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: chatlogs
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multi-db.sh:/docker-entrypoint-initdb.d/init-multi-db.sh:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yash"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_ui
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chatgpt.ai
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - app-network

  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - app-network

  promtail:
    image: grafana/promtail:2.9.2
    container_name: promtail
    volumes:
      # For Windows Docker Desktop - Docker container logs
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yaml
      - ./logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    # ports:
    #   - "8080:8080"
    networks:
      - app-network
    environment:
      - DATABASE_URL=postgresql://yash:secret@db:5432/users
      - SECRET_KEY=supersecretkey
    command: ["./wait-for-it.sh", "db:5432", "--", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080"]

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  react:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react  
    # ports:
    #   - "80:80"  
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_proxy
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - react
      - consumer
      - backend

networks:
  app-network:
    driver: bridge
    name: app-net

volumes:
  postgres_data:
  grafana-storage:
    driver: local
  redis-data:
    driver: local