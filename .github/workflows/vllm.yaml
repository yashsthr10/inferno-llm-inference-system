# .github/workflows/cicd.yml
# This GitHub Actions workflow defines the CI/CD pipeline for the vLLM application.
# It automates building the Docker image, pushing it to Google Container Registry (GCR),
# and deploying the new version to a Google Kubernetes Engine (GKE) cluster.
#
# UPDATED: This version is configured to use GitHub Secrets for all sensitive data,
# including the Hugging Face token.

name: vLLM CI/CD Pipeline

# --- TRIGGERS ---
# This workflow runs on any push event to the 'main' branch.
on:
  push:
    branches:
      - main

# --- ENVIRONMENT VARIABLES ---
# Non-sensitive environment variables.
env:
  IMAGE_NAME: vllm-server # Name of the Docker image
  K8S_NAMESPACE: chat-app # Define the namespace for clarity

jobs:
  # =================================================================
  # JOB 1: BUILD AND PUSH DOCKER IMAGE TO GOOGLE CONTAINER REGISTRY
  # =================================================================
  build-and-push-to-gcr:
    name: Build and Push to GCR
    runs-on: ubuntu-latest

    # Define permissions required for auth action
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      # This step checks out a copy of your repository for the workflow to use.

    # --- SECRET-BASED AUTHENTICATION ---
    # This step now uses a JSON key stored in GitHub secrets.
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      # IMPORTANT: You must create a GitHub secret named `GCP_CREDENTIALS`.
      # This secret should contain the JSON key of a GCP service account with
      # 'Storage Admin' role for pushing to GCR.

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'
      # This action downloads and configures the Google Cloud SDK (`gcloud`).

    - name: Configure Docker
      run: gcloud auth configure-docker gcr.io
      # This command configures Docker to use `gcloud` as a credential helper.

    - name: Build Docker Image
      run: |
        docker build \
          --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
          --tag "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest" \
          ./vllm
      # This step builds the Docker image. It now references `secrets.GCP_PROJECT_ID`.
      # IMPORTANT: You must create a GitHub secret named `GCP_PROJECT_ID`.

    - name: Push Docker Image to GCR
      run: |
        docker push "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        docker push "gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest"
      # This step pushes the newly built images to your Google Container Registry.

  # =================================================================
  # JOB 2: DEPLOY TO GOOGLE KUBERNETES ENGINE
  # =================================================================
  deploy-to-gke:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    needs: build-and-push-to-gcr # This job depends on the successful completion of the build job.

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      # Checks out the repository again for this job.

    # --- SECRET-BASED AUTHENTICATION ---
    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      # This uses the same secret as the build job. The service account key should
      # also have the 'Kubernetes Engine Developer' role for deploying to GKE.

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Get GKE Credentials
      run: gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
      # This command configures `kubectl` to connect to your GKE cluster.
      # IMPORTANT: You must create secrets for `GKE_CLUSTER_NAME` and `GKE_ZONE`.

    - name: Create/Update Kubernetes Secret for Hugging Face Token
      run: |
        kubectl create secret generic app-secrets \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --from-literal=HUGGINGFACE_TOKEN=${{ secrets.HUGGINGFACE_TOKEN }} \
          --dry-run=client -o yaml | kubectl apply -f -
      # This command securely creates or updates a Kubernetes secret named 'app-secrets' in the specified namespace.
      # It takes the Hugging Face token from a GitHub secret and makes it available to the deployment.
      # The --dry-run | kubectl apply pattern makes this operation idempotent (safe to run multiple times).
      # IMPORTANT: You must create a GitHub secret named `HUGGINGFACE_TOKEN`.

    - name: Update Kubernetes Deployment Image
      run: |
        sed -i "s|image: your-vllm-image|image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" k8s/vllm/deployment.yaml
      # This step replaces the placeholder image in your k8s manifest with the newly built image.

    - name: Apply Kubernetes Manifests
      run: kubectl apply -f k8s/vllm/
      # This command applies the updated configurations to your GKE cluster,
      # triggering a rolling update of your deployment.
